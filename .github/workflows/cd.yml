name: Build and Deploy

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "us-east-1"
      REPO_NAME: ${{ github.event.repositoryname }}
      TF_DIR: "tf"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Environment and ECR Repository
        id: set_env_ecr
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "ENV=staging" >> $GITHUB_ENV
          fi
          echo "ECR_REPOSITORY=${REPO_NAME}_${{ env.ENV }} " >> $GITHUB_ENV
          echo "BACKEND_CONFIG=backend-${{ env.ENV }}.tfbackend" >> $GITHUB_ENV

      - name: Set IMAGE_TAG
        run: |
          SHORT_SHA=${GITHUB_SHA:0:7}
          echo "IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_ENV

      # Step 3: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name kom-${{env.ENV}}-eks-cluster --region ${{ env.AWS_REGION }}


      # Step 4: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} -f Dockerfile.${{ env.ENV }} .
        env:
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      # Step 6: Tag Docker Image
      - name: Tag Docker Image
        run: |
          docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        env:
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      # Step 7: Push Docker Image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        env:
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      # Step 8: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">=1.5.0"

      # Step 9: Terraform Init
      - name: Terraform Init
        run: terraform init -var env=${{ env.ENV }} -backend-config=${{ env.BACKEND_CONFIG }}
        working-directory: ./${{ env.TF_DIR }}

      # Step 10: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan -var "env=${{ env.ENV }}" -var "image_tag=${{ env.IMAGE_TAG }}"
        working-directory: ./${{ env.TF_DIR }}

      # Step 11: Terraform Apply (only on push to main or staging)
      - name: Terraform Apply
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
        run: terraform apply -auto-approve tfplan
        working-directory: ./${{ env.TF_DIR }}
